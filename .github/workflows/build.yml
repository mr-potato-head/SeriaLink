name: QMake Build Matrix

on: [push]

env:
  QT_VERSION: 5.14.0

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows Latest x86", artifact: "Windows-x86.zip",
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat"
          }

    steps:

    # Clone / Checkout
    - name: Clone / Checkout
      uses: actions/checkout@v2

    # Fetch history and tags
    - name: Fetch history and tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* && git fetch --prune --unshallow

    # Create version file
    - name: Generate version file
      shell: bash
      run: ./version.sh

    # Download Qt
    - name: Download Qt
      id: qt
      shell: python
      run: |
        # Imports
        import urllib.request
        import re
        import os
        import fileinput
        import subprocess
        from pathlib import *
        
        # Initialize some variables
        qt_version = os.environ["QT_VERSION"]
        qt_version_dotless = qt_version.replace(".", "")
        url_os = "windows_x86"

        if "vcvars64.bat" in "${{ matrix.config.environment_script }}":
          qt_package_name = "qt.qt5." + qt_version_dotless + ".win64_msvc2017_64"
          qt_dir_prefix = qt_version + "/msvc2017_64"
        elif "vcvars32.bat" in "${{ matrix.config.environment_script }}":
          qt_package_name = "qt.qt5." + qt_version_dotless + ".win32_msvc2017"
          qt_dir_prefix = qt_version + "/msvc2017"

        qt_base_url = "https://download.qt.io/online/qtsdkrepository/" + url_os + "/desktop/qt5_" + qt_version_dotless

        # Get Update.xml file from Qt servers
        response = urllib.request.urlopen(qt_base_url + "/Updates.xml")
        data = response.read()
        update_file_content = data.decode('utf-8')

        pattern = "<Name>" + qt_package_name + "</Name>[\s\S]*<Version>([0-9+-.]+)</Version>[\s\S]*<DownloadableArchives>[\s\S]*qtbase([a-zA-Z0-9_-]+).7z"
        
        regex_result = re.search(pattern , update_file_content)
        if regex_result:
          package_version = regex_result.group(1)
          package_suffix = regex_result.group(2)
          package_suffix = package_suffix.replace("-debug-symbols", "")
        else:
          print("Error with the regex.")

        # Make directory for Qt files and store path
        os.mkdir("qt5")
        qt_dir = str(PurePath(os.environ["GITHUB_WORKSPACE"] + "/qt5/" + qt_dir_prefix))
        qt_dir = qt_dir.replace("\\", "/")
        print("::set-output name=qt_dir::" + qt_dir)

        # Download and extract useful packages
        packages = ['qtbase', 'qtdeclarative', 'qttools', 'qtsvg', 'qtserialport']
        for package in packages:
          response = urllib.request.urlopen(qt_base_url + "/" + qt_package_name + "/" + package_version + package + package_suffix + ".7z")
          with open("./" +  package + ".7z", 'wb') as f:
            f.write(response.read())
            
          # Use cmake environment in order tar to be able t extract 7z file, I don't really know why the default 'tar' can't extract it...
          un7z_cmd = "cd qt5 && cmake -E tar xvf ../" + package + ".7z"
          status = subprocess.run(un7z_cmd, shell=True)
          if status.returncode != 0:
            print("Can't extract " + package + ".7z.")

        # Update qconfig file to use opensource config
        with open("qt5/" + qt_dir_prefix + "/mkspecs/qconfig.pri", 'r') as file :
          filedata = file.read()
        
        filedata = filedata.replace("Enterprise", "OpenSource")
        filedata = filedata.replace("licheck.exe", "")
        filedata = filedata.replace("licheck64", "")
        filedata = filedata.replace("licheck_mac", "")

        with open("qt5/" + qt_dir_prefix + "/mkspecs/qconfig.pri", 'w') as file:
          file.write(filedata)

    # Run QMake
    - name: Configure
      shell: python
      run: |
        # Import modules
        import subprocess
        import re
        import os

        # Prepare environment
        status = subprocess.run('"${{ matrix.config.environment_script }}" && set', shell=True, capture_output=True, text=True)
        if status.returncode != 0:
          print("Can't run environment script.")

        env_variables = status.stdout.splitlines()
        for variable in env_variables:
          print(variable)
          regex_result = re.search("^([a-zA-Z0-9_-]+)=(.*)$", variable)
          if regex_result:
            print("Set environment variable.")
            os.environ[regex_result.group(1)] = regex_result.group(2)
               
        # Run QMake
        status = subprocess.run(["${{ steps.qt.outputs.qt_dir }}/bin/qmake", "CONFIG+=release"], shell=True, capture_output=True)
        if status.returncode != 0:
          print("An error occurred with qmake")

    # Run Make
    - name: Build
      shell: python
      run: |
        import os
        import subprocess
        status = subprocess.run('"${{ matrix.config.environment_script }}" && nmake', shell=True)
        if status.returncode != 0:
          print("An error occurred with nmake")

    # Copy executable into deployment directory
    - name: Copy binary into deploy directory
      shell: python
      run: |
        import os
        import shutil
        os.mkdir("deploy")
        shutil.copyfile("release/SeriaLink.exe", "deploy/SeriaLink-${{ matrix.config.artifact }}.exe")

    # Call Windeployqt to add dll etc.
    - name: Deploy
      shell: python
      run: |
        import subprocess
        status = subprocess.run(["${{ steps.qt.outputs.qt_dir }}/bin/windeployqt", "deploy"])
        if status.returncode != 0:
          print("An error occurred with windeployqt")
    
    # Create zip and upload deployment zip as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      id: upload_artifact
      with:
        path: deploy
        name: SeriaLink-${{ matrix.config.artifact }}
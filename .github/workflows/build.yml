name: QMake Build Matrix

on: [push]

env:
  QT_VERSION: 5.14.0

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }

    steps:

    # Clone / Checkout
    - name: Clone / Checkout
      uses: actions/checkout@v2

    - name: Fetch history and tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* && git fetch --prune --unshallow

    # Create version file
    - name: Generate version file
      shell: bash
      run: ./version.sh

    # Download Qt
    - name: Download Qt
      id: qt
      shell: python
      run: |
        import urllib.request
        import re
        import os
        import fileinput
        
        qt_version = os.environ["QT_VERSION"]
        qt_version_dotless = qt_version.replace(".", "")
        url_os = "windows_x86"
        qt_package_name = "qt.qt5." + qt_version_dotless + ".win64_msvc2017_64"
        qt_dir_prefix = qt_version + "/msvc2017_64"
        qt_base_url = "https://download.qt.io/online/qtsdkrepository/" + url_os + "/desktop/qt5_" + qt_version_dotless

        response = urllib.request.urlopen(qt_base_url + "/Updates.xml")
        data = response.read()
        text = data.decode('utf-8')
        
        reg = "<Name>" + qt_package_name + ".*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
        print(reg)
        x=re.search(reg , text)
        if x:
          package_version = x.group(1)
          package_suffix = x.group(2)
          package_suffix = package_suffix.replace("-debug-symbols", "")
        else:
          print("Error with the regex.")

        os.mkdir("qt5")

        packages = ['qtbase', 'qtdeclarative', 'qttools', 'qtsvg', 'qtserialport']
        for word in packages:
          response = urllib.request.urlopen(qt_base_url + "/" + qt_package_name + "/" + package_version + package + package_suffix + ".7z")
          with open('./${package}.7z', 'wb') as f:
            f.write(response.content)
          status.subprocess.run('cd qt5 && tar xvf ../${package}.7z')
          if status.returncode != 0:
            print("Can't extract ${package}.7z.")
        
        with fileinput.FileInput("qt5/${qt_dir_prefix}/mkspecs/qconfig.pri", inplace=True, backup='.bak') as file:
          for line in file:
            print(line.replace("Enterprise", "OpenSource"), end='')
            print(line.replace("licheck.exe", ""), end='')
            print(line.replace("licheck64", ""), end='')
            print(line.replace("licheck_mac", ""), end='')

    # Run QMake
    - name: Configure
      shell: python
      run: |
        # Import modules
        import subprocess
        import re
        import os

        # Prepare environment
        status = subprocess.run('"${{ matrix.config.environment_script }}" && set', shell=True, capture_output=True, text=True)
        print(status)
        #if status.returncode != 0:
        #  print("Can't run environment script.")

        # Get environment variables
        #status = subprocess.run("set", shell=True, capture_output=True, text=True)
        env_variables = status.stdout.splitlines()
        for variable in env_variables:
          print(variable)
          x=re.search("^([a-zA-Z0-9_-]+)=(.*)$", variable)
          if x:
            print("Set environment variable.")
            os.environ[x.group(1)] = x.group(2)
          else:
            print("no match.")
               
        # Run QMake
        status = subprocess.run(["${{ steps.qt.outputs.qt_dir }}/bin/qmake", "CONFIG+=release"], shell=True)
        if status.returncode != 0:
          print("An error occurred with qmake")

    # Run Make
    - name: Build
      shell: python
      run: |
        import os
        import subprocess
        status = subprocess.run('"${{ matrix.config.environment_script }}" && nmake', shell=True)
        if status.returncode != 0:
          print("An error occurred with nmake")

    # Copy executable into deployment directory
    - name: Copy binary into deploy directory
      shell: python
      run: |
        import os
        import shutil
        os.mkdir("deploy")
        shutil.copyfile("release/SeriaLink.exe", "deploy/SeriaLink.exe")

    # Call Windeployqt to add dll etc.
    - name: Deploy
      shell: python
      run: |
        import subprocess
        status = subprocess.run(["${{ steps.qt.outputs.qt_dir }}/bin/windeployqt", "deploy"])
        if status.returncode != 0:
          print("An error occurred with windeployqt")
    
    # Create zip and upload deployment zip as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      id: upload_artifact
      with:
        path: deploy
        name: test